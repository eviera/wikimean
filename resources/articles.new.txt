JQuery

h2. Invoking jQuery

Via CDN

bc(html). <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
<script src="app.js"></script>

In the app.js

bc(js). $(document).ready(function() {
...
});

h2. Selectors

* Type selector

Selects all the spans in the page

bc(js). $("span")

* Class selector

Selects all the elements with the 'squared' class

bc(js). $(".squared")

* Id selector

Selects the element named 'box'

bc(js). $("#box")

* Descendant selector

Selects all the li elements inside the elements named 'box' (it will select any li, no matter how deep it is inside the 'box')

bc(js). $("#box li")

* Child selector

Selects only the li which are direct descendants of the 'box'

bc(js). $("#box > li")

* Pseudo selectors
** :first
** :last
** :even (elements starts at 0)
** :odd

Selects the first li of the ul of class '.bordeaux'

bc(js). $("ul.bordeaux li:first")


h2. Traversing

Functions for traversing the DOM

* Find and children

Finds all li elements inside the 'box'

bc(js). $("box").find("li");

Find only the children li element of the 'box' (ignores li elements which are more deeply in the tree)

bc(js). $("box").children("li");

* Traversers
** first()
** last()
** next()
** prev()
** parent()

Find all the parents of the elements of class 'pepper'

bc(js). $(".pepper").parent();

h2. Inserting and Removing Elements

* Inserting
** append(<element>): puts the new element inside and at the bottom of the selected element (as child)
** prepend(<element>): puts the new element inside and at first place of the selected element (as child)
** after(<element>): puts the new element after the selected element (as sibling)
** before(<element>): puts the new element before the selected element (as sibling)

This code creates a new div and inserts it as the first element of the li of class 'raw'

bc(js). var spacer = $("<div>spacer</div>");
$("li.raw").append(spacer);

* Removing

Removes the selected element from the DOM

bc(js). $("#main_table").remove();

h2. Events

* On Click

Add an on click event to all the boxes

bc(js). $(".box").on("click", function() {
  ...
});

With more specificity

Add an on click event to the button inside all the boxes

bc(js). $(".box").on("click", "button", function() {
  ...
});

"created" : ISODate("2014-07-26T00:00:00-03:00"),

****************************************************************************
****************************************************************************
****************************************************************************
Angular

h2. Expressions

bc(html). <p>
I am {{4 + 6}}
</p>

bc(html). <p>
{{"hello" + " you"}}
</p>

h2. Directives

h3. ng-app

Describes the main module of the application

**index.html**

bc(html). <html ng-app="gemStore">
<script src="app.js"></script>

**app.js:** Example shown with an IIEF (Immediately Invoked Function Expression) construct

bc(js). (function() {
  var app = angular.module('gemStore', []);
})();


**Module Dependencies**

If a module depends on other modules, they have to be declared inside the squared brackets of the angular.module declaration

**index.html**

bc(html). <html ng-app="gemStore">
<script src="app.js"></script>
<script src="productStore.js"></script>


**productStore.js:** product store module

bc(js). (function() {
  var app = angular.module('productStore', []);
})();


**app.js:** gemStore requires (and includes) the productStore module

bc(js). (function() {
  var app = angular.module('gemStore', ['productStore']);
})();

h3. ng-controller

Defines the application behavior

**index.html**

bc(html). <body ng-controller="StoreController as store">
  <h2>Product Name: {{store.product.name}}</h2>

**app.js**

bc(js). app.controller('StoreController', function() {
    this.product =   {
      name: 'Azurite',
      description: "Some gems have hidden qualities beyond their luster, beyond their shine... Azurite is one of those gems.",
      shine: 8,
      price: 110.50
     }
  });

h2. Services

Example of using the $http service for a GET request inside a controller. The result comes as a "Promise":http://www.html5rocks.com/en/tutorials/es6/promises

The store variable has to be created copying the 'this' reference (the controller) so 'this' can be used inside the success function.

bc(js). app.controller('StoreController', ['$http', function($http){
      var store = this;
      store.products = [];
      $http.get('store-products.json').success(function(data) {
        store.products = data;
      });
    }]);


This is an example of the $log service (and the $http as well). Notice the parameter order in the function

bc(js). app.controller('StoreController', ['$http', '$log' function($http, $log){
      var store = this;
      store.products = [];
      $log.info('About to get the products...');
      $http.get('store-products.json').success(function(data) {
        store.products = data;
      });
    }]);



"created" : ISODate("2014-07-27T00:00:00-03:00"),

****************************************************************************
****************************************************************************
****************************************************************************
CSS

h2. Selectors

**X** Type selector

bc(html).. h1 {
  background-color: red;
}

<h1> Title <h1>

p.
<br>

**.X** Class selector

bc(html).. .header {
  color: #ff0a1e;
}

<section class="header"> Houses <section>

p.
<br>

**#X** Id selector

bc(css).. #saveButton {
  margin-top: 5px;
}

<button id="saveButton">

p.
<br>

**X.X** Compound selectors

Selects the elements that has BOTH selectors. In this example, it needs to be an <nowiki><h1></nowiki> and it has to have the id 'header'.
Note that the two selectors are correlatives with no space between them.

bc(html)..
h1#header {
  color: white;
}

<h1 class="intro" id="header">Chapter One</h1>

p.
<br>

**X X** Descendant selectors

Selects the descendants of the elements. In the example it will select all the elements with class 'green' inside a <nowiki><div></nowiki>  tag.
Note that it won't matter how deep an element of class 'ready' is inside a div, it will be selected anyways. In the example both the texts 'Another planet' and 'item 1' will be green.

bc(html)..
div .ready {
  color: green;
}

<div>
  <h1 class="ready">New mission</h1>
  <h2 class="note">Another planet</h2>
  <ul>
    <li class="ready">item 1</li>
    <li class="note">item 2</li>
</div>

p.
<br>

**X > X** Child selector

Only selects the child of the element

bc(html)..
#saveButton {
  margin-top: 5px;
}

<ul class="menu">
  <li> menu 1 </li>
  <li> menu 2 </li>
    <ul class="sub-menu">

  <li> menu 3 </li>

</ul>

p.


h2. Cascade Order

In order of priority

* Using _!important_ at the end of a line in definition

bc(css). .header {
  color: #ff0a1e !important;
}


* Inline style

bc(html). <h1 style="color: red;">Chapter One</h1>

* In the <head>

bc(html). <head>
  <style>
  ...
  </style>
 ...
</head>
</code>

* In an external CSS file

bc(html). <head>
  <link rel="stylesheet" href="styles.css" />
</head>
</code>

* If there are two equal selectors with the same definitions in the same document, the latter definition will override the first. In the following example the header is going to be red

bc(css). .header {
  color: green;
}
.header {
  color: red;
}


* If there are two equal selectors with different definitions in the same document, the result will mix. In the following example the header is going to be green with black background

bc(css). .header {
  color: green;
}
.header {
  background-color: black;
}


h2. Mixing multiple selectors

This example shows a way to add selective behavior to an element by mixing multiple classes

bc(html).. .box { width: 100px; float: left; margin: 0 10px 10px 0; }
.red { color: red; background: pink; }
.blue { color: blue; background: light-blue; }
.green { color: green; background: light-green; }
.border { border: 5px solid black; }

<code html>
<div class="red border box"></div>
<div class="blue border box"></div>
<div class="green border box"></div>
<div class="red box"></div>
<div class="blue box"></div>
<div class="green box"></div>
<div class="border box"></div>

p.

Any combination can be overridden

bc(css). .red.border { border-color: #900; }


"created" : ISODate("2014-07-28T00:00:00-03:00"),

****************************************************************************
****************************************************************************
****************************************************************************
Git

For a more explanatory guide: "http://git-scm.com/book":http://git-scm.com/book

h2. Basic Commands

h3. git file status lifecycle

There are 4 states in the life of file in a git project:

* Untracked: the file is not yet managed
* Unmodified: the file is managed by Git, but it was not yet modified
* Modified: the file changed but it is not staged
* Staged: the file can be commited

!/images/gitlifecycle.png!
image taken from: "http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository":http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository


h3. git init

Initializes a new repository. The folder where the command is run will be the place where the .git folder will be created. This folder contains ALL the code, versions, branches, ever tracked by this git project.

The command can be run in a new folder, or in an existent one that already has files

bc(bash). git init


h3. git status

As the name implies, it shows the status of the current project.

bc(bash). git status


h3. git add

The add command has two main functions, one is to add a file or files to the git tracking (the file or files are now ready to be commited), and the other is to add modified files to the stage (so they can be commited)

In summary:

* For a new file: git starts to track the file and it's ready for commit
* For a modified file: git puts the file in the stage so it can be commited

The add command works recursively if the path used is a directory

In a normal workflow, before every commit a git add should be performed over the modified files

bc(bash). # To add an individual file
git add file.txt
# To add multiple files (i.e.: all the txts)
git add '*.txt'
# To add all the files
git add .


h3. git commit

Commits the files from the staging area (and olny in the staging area. If a file is modified but not addeded to the stage, it will not be commited). The files are now in the git vault and can be 'pulled' (copied) for another person to use.

In the basic form of the command a message is passed as a commentary of the commit. If no message is passed (and the -m parameter is omitted), and editor windows will open so the user can enter the comment there.

bc(bash). git commit -m "comments of the commit"


h3. git log

List the commits ordered by last first.

bc(bash). # List commits in one line
git log --pretty=oneline


h2. GitHub operation

h3. git remote

Shows the remote repositories connected to this git project (the '-v' parameter also shows the remote's urls)

bc(bash). git remote -v

To inspect a remote and see if our local repository is up to date or not run the git remote show origin command

bc(bash). git remote show origin


h3. git clone

To retrieve a working copy of a project use the git clone command. It downloads all the files in the remote repository with the last commit along with all the history of changes inside the .git directory (which will be created)

The name of the remote repository by default is 'origin'. It can be changed with the '-o' parameter

This clone command:

bc(bash). git clone git://github.com/schacon/ticgit.git

Will create a directory called ticgit with all the files on that project (and the .git directory too)

h3. git pull

To fetch and merge changes from the remote repository, use the git pull command which will download all the changes and then merge them with the project

bc(bash). git pull


h3. git push

To submit the commited changes to the remote repository, use the git push command. If the local copy is not up to date with the repository the push will be rejected (and a pull will have to be done first)

bc(bash). git push


h2. A bit more advanced

h3. .gitignore

This file is used to mark the files that you never want to track. It can use some kind of regular expressions
If the files are not preceded with a slash, it will work recursively

bc(bash). # Example of a .gitignore file
# Ignore all the files named .classpath in all the directories
.classpath
# Ignore the file named presentation.bmp only in the root directory (not recursive)
/presentation.bmp
# Ignore all the files with .bin extension
*.bin
# Do track printable.bin, even if the previous line say the contrary (with the bang)
!printable.bin


h3. Removing files

To remove a file, first a git rm command has to be issued, followed by a git commit.
The git rm deletes the file from the disk and moves to the staging the deletion of the file
The git commit proceeds to delete it from the git vault

bc(bash). # First, erase the file and mark it as stagged
git rm file.txt
# Now, commit the deletion
git commit -m "the file has been erased"


h3. Undoing changes

To remove a file from the staging area (and move it to the modified files)

bc(bash). git reset HEAD filetounstage.txt


To revert the changes of a modified file to the version last commited (WARNING: THE CHANGES ON THE FILE WILL BE LOST)

bc(bash). git checkout -- filetorevert.txt


h3. gitk

This command shows a graphical interface with the tree of the project, all the commits, and tools for searching and showing differences

bc(bash). gitk


h3. Fixing the last commit

If a file was forgot to a commit, or the commit comment was wrong, it can be fixed using the '--amend' parameter.
If the '-m' parameter is specified, the comment will be changed, if it's not, the comment editor will be opened with the former comment

bc(bash). # The file test.txt was not included in the last commit, but belongs to it
# First, the file must be stagged
git add test.txt
# Next, the commit must be fixed
git commit --amend -m "this comment replaces the previous for the last commit"


h2. Troubleshooting

Problem: On git pull, error message "There is no tracking information for the current branch."

Solution: @git branch --set-upstream-to=origin/master master@

"created" : ISODate("2014-07-29T00:00:00-03:00"),

****************************************************************************
****************************************************************************
****************************************************************************
UTF-8

h3. Hints:

* Variable width encoding: this means that to represent a character one or many bytes can be used
* It is backwards compatible with ASCII:  UTF-8 uses one byte for any ASCII character, all of which have the same code values in both UTF-8 and ASCII encoding, and up to four bytes for other characters
* UTF-16 also has variable width, but UTF-32 uses a fixed width (because with 32 bits all the charactes in Unicodde can be represented)
* Unicode is a standard where each character (in any alphabet... even emojis) is mapped to a number (a 32 bits number), represented in hex from U+0000 to U+10FFFF

h3. How does the encoding works

* If a byte starts with 0, it is taken as a normal ASCII byte (of 7 bits)
* If a byte starts with the secuence 110 it means that the character will ocupy two bytes. The second one will start with 10
* If a byte starts with the secuence 1110 it means that the character will ocupy three bytes. The second and third will start with 10
* And so on

<br>

|_. Usable bits |_. From |_. To |_. Bytes |_. Byte 1 |_. Byte 2 |_. Byte 3 |_. Byte 4 |_. Byte 5 |_. Byte 6 |
|7	|U+0000		|U+007F		|1	|0xxxxxxx |         |         |         |           |           |
|11	|U+0080		|U+07FF		|2	|110xxxxx	|10xxxxxx |         |         |           |           |
|16	|U+0800		|U+FFFF		|3	|1110xxxx	|10xxxxxx	|10xxxxxx |         |           |           |
|21	|U+10000	|U+1FFFFF	|4	|11110xxx	|10xxxxxx	|10xxxxxx	|10xxxxxx |           |           |
|26	|U+200000	|U+3FFFFFF	|5	|111110xx	|10xxxxxx	|10xxxxxx	|10xxxxxx	|10xxxxxx |           |
|31	|U+4000000	|U+7FFFFFFF	|6	|1111110x	|10xxxxxx	|10xxxxxx	|10xxxxxx	|10xxxxxx	|10xxxxxx |

<br>
<br>

{{youtube:MijmeoH9LT4}}

****************************************************************************
****************************************************************************
****************************************************************************
PM2

h2. Process Manager for Node.js

h3. Reference

"https://github.com/Unitech/pm2":https://github.com/Unitech/pm2
"http://pm2.keymetrics.io/docs/usage/quick-start/":http://pm2.keymetrics.io/docs/usage/quick-start/

h3. Add to startup

bc(bash). # pm2 startup

This adds a script to <code>/Users/emi/Library/LaunchAgents/io.keymetrics.PM2.plist</code>

h3. Remove from startup

bc(bash). # launchctl list | grep pm2
# sudo launchctl remove <pm2-agent-name>

h3. Common tasks

* Start server: <code># pm2 start server.js</code>
* Start server with command line arguments: <code># pm2 start server.js -- arguments</code>
* Start server with production environment: <code># NODE_ENV=production pm2 start server.js </code>. This survives reboot.
* Stop server: <code># pm2 stop server</code>
* Remove server from monitor: <code># pm2 delete server</code>
* List current services: <code># pm2 list</code>


****************************************************************************
****************************************************************************
****************************************************************************
MongoDB

h2. Startup

Create a plist with:

bc(bash). # sudo atom /Library/LaunchDaemons/org.mongo.mongod.plist

bc(xml). <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>org.mongo.mongod</string>
    <key>RunAtLoad</key>
    <true/>
    <key>ProgramArguments</key>
    <array>
        <string>/usr/local/bin/mongod</string>
        <string>--dbpath</string>
        <string>/data/db/</string>
        <string>--logpath</string>
        <string>/var/log/mongodb.log</string>
    </array>
</dict>
</plist>

Create the log file

bc(bash). # sudo touch /var/log/mongodb.log

Change permissons to the plist

bc(bash). # sudo chown root:wheel /Library/LaunchDaemons/org.mongo.mongod.plist

And start the service with:

bc(bash). # sudo launchctl load /Library/LaunchDaemons/org.mongo.mongod.plist
# sudo launchctl start org.mongo.mongod
