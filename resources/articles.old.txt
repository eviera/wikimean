==== jQuery ====

== Invoking jQuery ==

Via CDN
<code html>
<script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
<script src="app.js"></script>
</code>

In the app.js
<code javascript>
$(document).ready(function() {
...
});
</code>


== Selectors ==

  * Type selector

Selects all the spans in the page

<code javascript>
$("span")
</code>

  * Class selector

Selects all the elements with the 'squared' class

<code javascript>
$(".squared")
</code>

  * Id selector

Selects the element named 'box'

<code javascript>
$("#box")
</code>

  * Descendant selector

Selects all the li elements inside the elements named 'box' (it will select any li, no matter how deep it is inside the 'box')

<code javascript>
$("#box li")
</code>


  * Child selector

Selects only the li which are direct descendants of the 'box'

<code javascript>
$("#box > li")
</code>


  * Pseudo selectors
    * :first
    * :last
    * :even (elements starts at 0)
    * :odd

Selects the first li of the ul of class '.bordeaux'
<code javascript>
$("ul.bordeaux li:first")
</code>

== Traversing ==

Functions for traversing the DOM

  * Find and children

Finds all li elements inside the 'box'

<code javascript>
$("box").find("li");
</code>

Find only the children li element of the 'box' (ignores li elements which are more deeply in the tree)

<code javascript>
$("box").children("li");
</code>

  * Traversers
    * first()
    * last()
    * next()
    * prev()
    * parent()
    *

Find all the parents of the elements of class 'pepper'

<code javascript>
$(".pepper").parent();
</code>

== Inserting and Removing Elements ==

  * Inserting

    * append(<element>): puts the new element inside and at the bottom of the selected element (as child)
    * prepend(<element>): puts the new element inside and at first place of the selected element (as child)
    * after(<element>): puts the new element after the selected element (as sibling)
    * before(<element>): puts the new element before the selected element (as sibling)

This code creates a new div and inserts it as the first element of the li of class 'raw'

<code javascript>
var spacer = $("<div>spacer</div>");
$("li.raw").append(spacer);
</code>

  * Removing

Removes the selected element from the DOM

<code javascript>
$("#main_table").remove();
</code>

== Events ==

  * On Click

Add an on click event to all the boxes

<code javascript>
$(".box").on("click", function() {
  ...
});
</code>

With more specificity

Add an on click event to the button inside all the boxes

<code javascript>
$(".box").on("click", "button", function() {
  ...
});
</code>


****************************************************************************
****************************************************************************
****************************************************************************

==== Angular.js ====

=== Expressions ===
<code html>
<p>
I am {{4 + 6}}
</p>
</code>

<code html>
<p>
{{"hello" + " you"}}
</p>
</code>


=== Directives ===

== ng-app ==

Describes the main module of the application

**index.html**
<code html>
<html ng-app="gemStore">
<script src="app.js"></script>
</code>

**app.js:** Example shown with an IIEF ((Immediately Invoked Function Expression)) construct
<code javascript>
(function() {
  var app = angular.module('gemStore', []);
})();
</code>

** Module Depndencies **

If a module depends on other modules, they have to be declared inside the squared brackets of the angular.module declaration

**index.html**
<code html>
<html ng-app="gemStore">
<script src="app.js"></script>
<script src="productStore.js"></script>
</code>

**productStore.js:** product store module
<code javascript>
(function() {
  var app = angular.module('productStore', []);
})();
</code>

**app.js:** gemStore requires (and includes) the productStore module
<code javascript>
(function() {
  var app = angular.module('gemStore', ['productStore']);
})();
</code>


== ng-controller ==

Defines the application behavior

**index.html**
<code html>
<body ng-controller="StoreController as store">
  <h2>Product Name: {{store.product.name}}</h2>
</code>

**app.js**
<code javascript>
  app.controller('StoreController', function() {
    this.product =   {
      name: 'Azurite',
      description: "Some gems have hidden qualities beyond their luster, beyond their shine... Azurite is one of those gems.",
      shine: 8,
      price: 110.50
     }
  });
</code>

=== Services ===

Example of using the $http service for a GET request inside a controller. The result comes as a [[http://www.html5rocks.com/en/tutorials/es6/promises|Promise]]

The store variable has to be created copying the 'this' reference (the controller) so 'this' can be used inside the success function.

<code javascript>
  app.controller('StoreController', ['$http', function($http){
      var store = this;
      store.products = [];

      $http.get('store-products.json').success(function(data) {
        store.products = data;
      });

    }]);
</code>

This is an example of the $log service (and the $http as well). Notice the parameter order in the function

<code javascript>
  app.controller('StoreController', ['$http', '$log' function($http, $log){
      var store = this;
      store.products = [];

      $log.info('About to get the products...');

      $http.get('store-products.json').success(function(data) {
        store.products = data;
      });

    }]);
</code>

2014/07/19
****************************************************************************
****************************************************************************
****************************************************************************

==== CSS ====

=== Selectors ===

  * **X** Type selector
<code html>
h1 {
  background-color: red;
}

<h1> Title <h1>
</code>

  * **.X** Class selector
<code html>
.header {
  color: #ff0a1e;
}

<section class="header"> Houses <section>
</code>

  * **#X** Id selector
<code html>
#saveButton {
  margin-top: 5px;
}

<button id="saveButton">
</code>

  * **X.X** Compound selectors
Selects the elements that has BOTH selectors. In this example, it needs to be an <nowiki><h1></nowiki> and it has to have the id 'header'.
\\
Note that the two selectors are correlatives with no space between them.
<code html>
h1#header {
  color: white;
}

<h1 class="intro" id="header">Chapter One</h1>
</code>

  * **X X** Descendant selectors
Selects the descendents of the elements. In the example it will select all the elements with class 'green' inside a <nowiki><div></nowiki>  tag.
\\
Note that it won't matter how deep an element of class 'ready' is inside a div, it will be selected anyways. In the example both the texts 'Another planet' and 'item 1' will be green.
<code html>
div .ready {
  color: green;
}

<div>
  <h1 class="ready">New mission</h1>
  <h2 class="note">Another planet</h2>
  <ul>
    <li class="ready">item 1</li>
    <li class="note">item 2</li>
</div>
</code>


  * **X > X** Child selector
Only selects the child of the element
<code html>
#saveButton {
  margin-top: 5px;
}

<ul class="menu">
  <li> menu 1 </li>
  <li> menu 2 </li>
    <ul class="sub-menu">

  <li> menu 3 </li>

</ul>
</code>


=== Cascade Order ===

In order of priority

  * Using //!important// at the end of a line in definition
<code css>
.header {
  color: #ff0a1e !important;
}
</code>

  * Inline style
<code html>
<h1 style="color: red;">Chapter One</h1>
</code>

  * In the <head>
<code html>
<head>
  <style>
  ...
  </style>

 ...
</head>
</code>

  * In an external CSS file
<code html>
<head>
  <link rel="stylesheet" href="styles.css" />
</head>
</code>

  * If there are two equal selectors with the same definitions in the same document, the latter definition will override the first. In the following example the header is going to be red
<code css>
.header {
  color: green;
}
.header {
  color: red;
}
</code>

  * If there are two equal selectors with different definitions in the same document, the result will mix. In the following example the header is going to be green with black background
<code css>
.header {
  color: green;
}
.header {
  background-color: black;
}
</code>

=== Mixing multiple selectors ===
This example shows a way to add selective behavior to an element by mixing multiple classes
<code css>
.box { width: 100px; float: left; margin: 0 10px 10px 0; }
.red { color: red; background: pink; }
.blue { color: blue; background: light-blue; }
.green { color: green; background: light-green; }
.border { border: 5px solid black; }
</code>

<code html>
<div class="red border box"></div>
<div class="blue border box"></div>
<div class="green border box"></div>
<div class="red box"></div>
<div class="blue box"></div>
<div class="green box"></div>
<div class="border box"></div>
</code>

Any combination can be overridden
<code css>
.red.border { border-color: #900; }
</code>

****************************************************************************
****************************************************************************
****************************************************************************

==== Git: Simple Reference Guide ====

For a more explanatory guide: http://git-scm.com/book

=== Basic Commands ===

== git file status lifecycle ==
There are 4 states in the life of file in a git project:
  * Untracked: the file is not yet managed
  * Unmodified: the file is managed by Git, but it was not yet modified
  * Modified: the file changed but it is not staged
  * Staged: the file can be commited

| {{ :gitlifecycle.png |}} |
| image taken from http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository |

== git init ==
Initializes a new repository. The folder where the command is run will be the place where the .git folder will be created. This folder contains ALL the code, versions, branches, ever tracked by this git project.

The command can be run in a new folder, or in an existent one that already has files

<code bash>
git init
</code>

== git status ==
As the name implies, it shows the status of the current project.

<code bash>
git status
</code>

== git add ==
The add command has two main functions, one is to add a file or files to the git tracking (the file or files are now ready to be commited), and the other is to add modified files to the stage (so they can be commited)

In summary:
  * For a new file: git starts to track the file and it's ready for commit
  * For a modified file: git puts the file in the stage so it can be commited

The add command works recursively if the path used is a directory

In a normal workflow, before every commit a git add should be performed over the modified files

<code bash>
# To add an individual file
git add file.txt
# To add multiple files (i.e.: all the txts)
git add '*.txt'
# To add all the files
git add .
</code>

== git commit ==
Commits the files from the staging area (and olny in the staging area. If a file is modified but not addeded to the stage, it will not be commited). The files are now in the git vault and can be 'pulled' (copied) for another person to use.

In the basic form of the command a message is passed as a commentary of the commit. If no message is passed (and the -m parameter is omitted), and editor windows will open so the user can enter the comment there.

<code bash>
git commit -m "comments of the commit"
</code>


== git log ==
List the commits ordered by last first.

<code bash>
# List commits in one line
git log --pretty=oneline
</code>

=== GitHub operation ===

== git remote ==
Shows the remote repositories connected to this git project (the '-v' parameter also shows the remote's urls)
<code bash>
git remote -v
</code>

To inspect a remote and see if our local repository is up to date or not run the git remote show origin command
<code bash>
git remote show origin
</code>


== git clone ==
To retrieve a working copy of a project use the git clone command. It downloads all the files in the remote repository with the last commit along with all the history of changes inside the .git directory (which will be created)

The name of the remote repository by default is 'origin'. It can be changed with the '-o' parameter

This clone command:
<code bash>
git clone git://github.com/schacon/ticgit.git
</code>

Will create a directory called ticgit with all the files on that project (and the .git directory too)

== git pull ==
To fetch and merge changes from the remote repository, use the git pull command which will download all the changes and then merge them with the project
<code bash>
git pull
</code>

== git push ==
To submit the commited changes to the remote repository, use the git push command. If the local copy is not up to date with the repository the push will be rejected (and a pull will have to be done first)
<code bash>
git push
</code>

=== A bit more advanced ===

== .gitignore ==
This file is used to mark the files that you never want to track. It can use some kind of regular expressions
If the files are not preceded with a slash, it will work recursively

<code bash>
# Example of a .gitignore file

# Ignore all the files named .classpath in all the directories
.classpath
# Ignore the file named presentation.bmp only in the root directory (not recursive)
/presentation.bmp
# Ignore all the files with .bin extension
*.bin
# Do track printable.bin, even if the previous line say the contrary (with the bang)
!printable.bin
</code>

== Removing files ==
To remove a file, first a git rm command has to be issued, followed by a git commit.
The git rm deletes the file from the disk and moves to the staging the deletion of the file
The git commit proceeds to delete it from the git vault

<code bash>
# First, erase the file and mark it as stagged
git rm file.txt
# Now, commit the deletion
git commit -m "the file has been erased"
</code>

== Undoing changes ==
To remove a file from the staging area (and move it to the modified files)
<code bash>
git reset HEAD filetounstage.txt
</code>

To revert the changes of a modified file to the version last commited (WARNING: THE CHANGES ON THE FILE WILL BE LOST)
<code bash>
git checkout -- filetorevert.txt
</code>

== gitk ==
This command shows a graphical interface with the tree of the project, all the commits, and tools for searching and showing differences

<code bash>
gitk
</code>

== Fixing the last commit ==
If a file was forgot to a commit, or the commit comment was wrong, it can be fixed using the '--amend' parameter.
If the '-m' parameter is specified, the comment will be changed, if it's not, the comment editor will be opened with the former comment

<code bash>
# The file test.txt was not included in the last commit, but belongs to it
# First, the file must be stagged
git add test.txt
# Next, the commit must be fixed
git commit --amend -m "this comment replaces the previous for the last commit"
</code>


****************************************************************************
****************************************************************************
****************************************************************************
