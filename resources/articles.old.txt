==== jQuery ====

== Invoking jQuery ==

Via CDN
<code html>
<script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
<script src="app.js"></script>
</code>

In the app.js
<code javascript>
$(document).ready(function() {
...
});
</code>


== Selectors ==

  * Type selector

Selects all the spans in the page

<code javascript>
$("span")
</code>

  * Class selector

Selects all the elements with the 'squared' class

<code javascript>
$(".squared")
</code>

  * Id selector

Selects the element named 'box'

<code javascript>
$("#box")
</code>

  * Descendant selector

Selects all the li elements inside the elements named 'box' (it will select any li, no matter how deep it is inside the 'box')

<code javascript>
$("#box li")
</code>


  * Child selector

Selects only the li which are direct descendants of the 'box'

<code javascript>
$("#box > li")
</code>


  * Pseudo selectors
    * :first
    * :last
    * :even (elements starts at 0)
    * :odd

Selects the first li of the ul of class '.bordeaux'
<code javascript>
$("ul.bordeaux li:first")
</code>

== Traversing ==

Functions for traversing the DOM

  * Find and children

Finds all li elements inside the 'box'

<code javascript>
$("box").find("li");
</code>

Find only the children li element of the 'box' (ignores li elements which are more deeply in the tree)

<code javascript>
$("box").children("li");
</code>

  * Traversers
    * first()
    * last()
    * next()
    * prev()
    * parent()
    *

Find all the parents of the elements of class 'pepper'

<code javascript>
$(".pepper").parent();
</code>

== Inserting and Removing Elements ==

  * Inserting

    * append(<element>): puts the new element inside and at the bottom of the selected element (as child)
    * prepend(<element>): puts the new element inside and at first place of the selected element (as child)
    * after(<element>): puts the new element after the selected element (as sibling)
    * before(<element>): puts the new element before the selected element (as sibling)

This code creates a new div and inserts it as the first element of the li of class 'raw'

<code javascript>
var spacer = $("<div>spacer</div>");
$("li.raw").append(spacer);
</code>

  * Removing

Removes the selected element from the DOM

<code javascript>
$("#main_table").remove();
</code>

== Events ==

  * On Click

Add an on click event to all the boxes

<code javascript>
$(".box").on("click", function() {
  ...
});
</code>

With more specificity

Add an on click event to the button inside all the boxes

<code javascript>
$(".box").on("click", "button", function() {
  ...
});
</code>


****************************************************************************
****************************************************************************
****************************************************************************

==== Angular.js ====

=== Expressions ===
<code html>
<p>
I am {{4 + 6}}
</p>
</code>

<code html>
<p>
{{"hello" + " you"}}
</p>
</code>


=== Directives ===

== ng-app ==

Describes the main module of the application

**index.html**
<code html>
<html ng-app="gemStore">
<script src="app.js"></script>
</code>

**app.js:** Example shown with an IIEF ((Immediately Invoked Function Expression)) construct
<code javascript>
(function() {
  var app = angular.module('gemStore', []);
})();
</code>

** Module Depndencies **

If a module depends on other modules, they have to be declared inside the squared brackets of the angular.module declaration

**index.html**
<code html>
<html ng-app="gemStore">
<script src="app.js"></script>
<script src="productStore.js"></script>
</code>

**productStore.js:** product store module
<code javascript>
(function() {
  var app = angular.module('productStore', []);
})();
</code>

**app.js:** gemStore requires (and includes) the productStore module
<code javascript>
(function() {
  var app = angular.module('gemStore', ['productStore']);
})();
</code>


== ng-controller ==

Defines the application behavior

**index.html**
<code html>
<body ng-controller="StoreController as store">
  <h2>Product Name: {{store.product.name}}</h2>
</code>

**app.js**
<code javascript>
  app.controller('StoreController', function() {
    this.product =   {
      name: 'Azurite',
      description: "Some gems have hidden qualities beyond their luster, beyond their shine... Azurite is one of those gems.",
      shine: 8,
      price: 110.50
     }
  });
</code>

=== Services ===

Example of using the $http service for a GET request inside a controller. The result comes as a [[http://www.html5rocks.com/en/tutorials/es6/promises|Promise]]

The store variable has to be created copying the 'this' reference (the controller) so 'this' can be used inside the success function.

<code javascript>
  app.controller('StoreController', ['$http', function($http){
      var store = this;
      store.products = [];

      $http.get('store-products.json').success(function(data) {
        store.products = data;
      });

    }]);
</code>

This is an example of the $log service (and the $http as well). Notice the parameter order in the function

<code javascript>
  app.controller('StoreController', ['$http', '$log' function($http, $log){
      var store = this;
      store.products = [];

      $log.info('About to get the products...');

      $http.get('store-products.json').success(function(data) {
        store.products = data;
      });

    }]);
</code>

2014/07/19
****************************************************************************
****************************************************************************
****************************************************************************

==== CSS ====

=== Selectors ===

  * **X** Type selector
<code html>
h1 {
  background-color: red;
}

<h1> Title <h1>
</code>

  * **.X** Class selector
<code html>
.header {
  color: #ff0a1e;
}

<section class="header"> Houses <section>
</code>

  * **#X** Id selector
<code html>
#saveButton {
  margin-top: 5px;
}

<button id="saveButton">
</code>

  * **X.X** Compound selectors
Selects the elements that has BOTH selectors. In this example, it needs to be an <nowiki><h1></nowiki> and it has to have the id 'header'.
\\
Note that the two selectors are correlatives with no space between them.
<code html>
h1#header {
  color: white;
}

<h1 class="intro" id="header">Chapter One</h1>
</code>

  * **X X** Descendant selectors
Selects the descendents of the elements. In the example it will select all the elements with class 'green' inside a <nowiki><div></nowiki>  tag.
\\
Note that it won't matter how deep an element of class 'ready' is inside a div, it will be selected anyways. In the example both the texts 'Another planet' and 'item 1' will be green.
<code html>
div .ready {
  color: green;
}

<div>
  <h1 class="ready">New mission</h1>
  <h2 class="note">Another planet</h2>
  <ul>
    <li class="ready">item 1</li>
    <li class="note">item 2</li>
</div>
</code>


  * **X > X** Child selector
Only selects the child of the element
<code html>
#saveButton {
  margin-top: 5px;
}

<ul class="menu">
  <li> menu 1 </li>
  <li> menu 2 </li>
    <ul class="sub-menu">

  <li> menu 3 </li>

</ul>
</code>


=== Cascade Order ===

In order of priority

  * Using //!important// at the end of a line in definition
<code css>
.header {
  color: #ff0a1e !important;
}
</code>

  * Inline style
<code html>
<h1 style="color: red;">Chapter One</h1>
</code>

  * In the <head>
<code html>
<head>
  <style>
  ...
  </style>

 ...
</head>
</code>

  * In an external CSS file
<code html>
<head>
  <link rel="stylesheet" href="styles.css" />
</head>
</code>

  * If there are two equal selectors with the same definitions in the same document, the latter definition will override the first. In the following example the header is going to be red
<code css>
.header {
  color: green;
}
.header {
  color: red;
}
</code>

  * If there are two equal selectors with different definitions in the same document, the result will mix. In the following example the header is going to be green with black background
<code css>
.header {
  color: green;
}
.header {
  background-color: black;
}
</code>

=== Mixing multiple selectors ===
This example shows a way to add selective behavior to an element by mixing multiple classes
<code css>
.box { width: 100px; float: left; margin: 0 10px 10px 0; }
.red { color: red; background: pink; }
.blue { color: blue; background: light-blue; }
.green { color: green; background: light-green; }
.border { border: 5px solid black; }
</code>

<code html>
<div class="red border box"></div>
<div class="blue border box"></div>
<div class="green border box"></div>
<div class="red box"></div>
<div class="blue box"></div>
<div class="green box"></div>
<div class="border box"></div>
</code>

Any combination can be overridden
<code css>
.red.border { border-color: #900; }
</code>

****************************************************************************
****************************************************************************
****************************************************************************
